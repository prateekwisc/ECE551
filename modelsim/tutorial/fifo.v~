module queue(clk,reset,data_in,wr,rd,data_out,full,empty); 
 parameter WIDTH = 8;
  parameter LENGTH = 16;
  
function integer log2;
 input integer num;
 begin
 log2 = 0;
 for(log2=0;num>0;log2 = log2 + 1) begin
 num = num>>1;
 end
 end
endfunction

  
  localparam ADDR_WIDTH = log2(LENGTH)-1;

  
 input wire clk;
   input wire reset;
   input wire [WIDTH-1:0] data_in;
   input wire wr;
   input wire rd;
   output [WIDTH-1:0] data_out;
   output wire full;
   output wire empty;
  
  /*wire count;
   reg [ADDR_WIDTH:0] full_indicator;  //N
  
  reg [ADDR_WIDTH-1:0] wr_ptr; // N-1
  reg [ADDR_WIDTH-1:0] rd_ptr; // N-1
 
  reg[WIDTH-1:0] mem[LENGTH-1:0]; */
 
  
 generate
    if (LENGTH ==0)
     q1_queue #(WIDTH,LENGTH)q1(clk,reset,data_in,wr,rd,data_out,full,empty); 
    else
     q2_queue #(WIDTH,LENGTH)q2(clk,reset,data_in,wr,rd,data_out,full,empty);
    endgenerate
 endmodule 

module q1_queue(clk,reset,data_in,wr,rd,data_out,full,empty);
    parameter WIDTH = 8;
  parameter LENGTH = 16;
  
    
    input wire clk;
   input wire reset;
   input wire [WIDTH-1:0] data_in;
   input wire wr;
   input wire rd;
   output reg [WIDTH-1:0] data_out;
   output wire full;
   output wire empty;
  
  
   
   assign full = 1'b0;
   assign empty = 1'b0;
   assign data_in = data_out;
 endmodule



module Booth_Multiplier #(
    parameter pN = 4 // Width = 2**pN: multiplicand & multiplier
)(
    input Rst, // Reset
    input Clk, // Clock
    
    input Ld, // Load Registers and Start Multiplier
    input [(2**pN - 1):0] M, // Multiplicand
    input [(2**pN - 1):0] R, // Multiplier
    output reg Valid, // Product Valid
    output reg [(2**(pN+1) - 1):0] P // Product <= M * R
);

///////////////////////////////////////////////////////////////////////////////
//
// Local Parameters
//

///////////////////////////////////////////////////////////////////////////////
//
// Declarations
//

reg [2**pN:0] A; // Multiplicand w/ sign guard bit
reg [ pN:0] Cntr; // Operation Counter
reg [2**pN:0] S; // Adder w/ sign guard bit

reg [(2**(pN+1) + 1):0] Prod; // Double length product w/ guard bits

///////////////////////////////////////////////////////////////////////////////
//
// Implementation
//

always @(posedge Clk)
begin
    if(Rst)
        Cntr <= #1 0;
    else if(Ld)
        Cntr <= #1 2**pN;
    else if(|Cntr)
        Cntr <= #1 (Cntr - 1);
end

// Multiplicand Register
// includes an additional bit to guard sign bit in the event the
// most negative value is provided as the multiplicand.

always @(posedge Clk)
begin
    if(Rst)
        A <= #1 0;
    else if(Ld)
        A <= #1 {M[2**pN - 1], M};
end

// Compute Upper Partial Product: (2**pN + 1) bits in width

always @(*)
begin
    case(Prod[1:0])
        2'b01 : S <= Prod[(2**(pN+1) + 1):(2**pN + 1)] + A;
        2'b10 : S <= Prod[(2**(pN+1) + 1):(2**pN + 1)] - A;
        default : S <= Prod[(2**(pN+1) + 1):(2**pN + 1)];
    endcase
end

// Register Partial products and shift rigth arithmetically.
// Product register has guard bits on both ends.

always @(posedge Clk)
begin
    if(Rst)
        Prod <= #1 0;
    else if(Ld)
        Prod <= #1 {R, 1'b0};
    else if(|Cntr)
        Prod <= #1 {S[2**pN], S, Prod[2**pN:1]}; // Arithmetic Shift Right
end

// Assign the product less the two guard bits to the output port

always @(posedge Clk)
begin


module tb_Booth_Multiplier;

parameter N = 2;

// UUT Signals

reg Rst;
reg Clk;

reg Ld;
reg [(2**N - 1):0] M;
reg [(2**N - 1):0] R;

wire Valid;
wire [(2**(N+1) - 1):0] P;

// Simulation Variables

reg [2**(N+1):0] i;

// Instantiate the Unit Under Test (UUT)

Booth_Multiplier #(
                        .pN(N)
                    ) uut (
                        .Rst(Rst),
                        .Clk(Clk),
                        .Ld(Ld),
                        .M(M),
                        .R(R),
                        .Valid(Valid),
                        .P(P)
                    );

initial begin
    // Initialize Inputs
    Rst = 1;
    Clk = 1;
    Ld = 0;
    M = 0;
    R = 0;
    
    i = 0;

    // Wait 100 ns for global reset to finish
    #101 Rst = 0;
    
    // Add stimulus here
    
    for(i = 0; i < (2**(2**(N+1))); i = i + 1) begin
        @(posedge Clk) #1 Ld = 1;
            M = i[(2**(N+1) - 1):2**N];
            R = i[(2**N - 1):0];
        @(posedge Clk) #1 Ld = 0;
        @(posedge Valid);
    end
    
end

///////////////////////////////////////////////////////////////////////////////

always #5 Clk = ~Clk;
      
///////////////////////////////////////////////////////////////////////////////

endmodule









module Booth_Multiplier_1xA #(
    parameter N = 16 // Width = N: multiplicand & multiplier
)(
    input Rst, // Reset
    input Clk, // Clock
    
    input Ld, // Load Registers and Start Multiplier
    input [(N - 1):0] M, // Multiplicand
    input [(N - 1):0] R, // Multiplier
    output reg Valid, // Product Valid
    output reg [(2*N - 1):0] P // Product <= M * R
);

///////////////////////////////////////////////////////////////////////////////
//
// Local Parameters
//

///////////////////////////////////////////////////////////////////////////////
//
// Declarations
//

reg [4:0] Cntr; // Operation Counter
reg [1:0] Booth; // Booth Recoding Field
reg Guard; // Shift bit for Booth Recoding
reg [N:0] A; // Multiplicand w/ sign guard bit
reg [N:0] B; // Input Operand to Adder w/ sign guard bit
reg Ci; // Carry input to Adder
reg [N:0] S; // Adder w/ sign guard bit
wire [N:0] Hi; // Upper half of Product w/ sign guard

reg [2*N:0] Prod; // Double length product w/ sign guard bit

///////////////////////////////////////////////////////////////////////////////
//
// Implementation
//

always @(posedge Clk)
begin
    if(Rst)
        Cntr <= #1 0;
    else if(Ld)
        Cntr <= #1 N;
    else if(|Cntr)
        Cntr <= #1 (Cntr - 1);
end

// Multiplicand Register
// includes an additional bit to guard sign bit in the event the
// most negative value is provided as the multiplicand.

always @(posedge Clk)
begin
    if(Rst)
        A <= #1 0;
    else if(Ld)
        A <= #1 {M[N - 1], M};
end

// Compute Upper Partial Product: (N + 1) bits in width

always @(*) Booth <= {Prod[0], Guard}; // Booth's Multiplier Recoding field

assign Hi = Prod[2*N:N]; // Upper Half of the Product Register

always @(*)
begin
    case(Booth)
        2'b01 : {Ci, B} <= {1'b0, A};
        2'b10 : {Ci, B} <= {1'b1, ~A};
        default : {Ci, B} <= 0;
    endcase
end

always @(*) S <= Hi + B + Ci;

// Register Partial products and shift right arithmetically.
// Product register has a sign extension guard bit.

always @(posedge Clk)
begin
    if(Rst)
        Prod <= #1 0;
    else if(Ld)
        Prod <= #1 R;
    else if(|Cntr) // Arithmetic right shift 1 bit
        Prod <= #1 {S[N], S, Prod[(N - 1):1]};
end

always @(posedge Clk)
begin
    if(Rst)
        Guard <= #1 0;
    else if(Ld)
        Guard <= #1 0;
    else if(|Cntr)
        Guard <= #1 Prod[0];
end

// Assign the product less the sign extension guard bit to the output port

always @(posedge Clk)
begin
    if(Rst)
        P <= #1 0;
    else if(Cntr == 1)
        P <= #1 {S, Prod[(N - 1):1]};
end

// Count the number of shifts
// This implementation does not use any optimizations to perform multiple
// bit shifts to skip over runs of 1s or 0s.

always @(posedge Clk)
begin
    if(Rst)
        Valid <= #1 0;
    else
        Valid <= #1 (Cntr == 1);
end

endmodule


module tb_Booth_Multiplier_1xA;

parameter N = 3; // Number of bits = 2**N

// UUT Signals

reg Rst;
reg Clk;

reg Ld;
reg [(2**N - 1):0] M;
reg [(2**N - 1):0] R;

wire Valid, Valid_A;
wire [(2**(N+1) - 1):0] P, P_A;

// Simulation Variables

reg [2**(N+1):0] i;

// Instantiate the Unit Under Test (UUT)

Booth_Multiplier #(
                            .pN(N)
                        ) uut (
                            .Rst(Rst),
                            .Clk(Clk),
                            .Ld(Ld),
                            .M(M),
                            .R(R),
                            .Valid(Valid),
                            .P(P)
                        );

Booth_Multiplier_1xA #(
                            .N(2**N)
                        ) RevA (
                            .Rst(Rst),
                            .Clk(Clk),
                            .Ld(Ld),
                            .M(M),
                            .R(R),
                            .Valid(Valid_A),
                            .P(P_A)
                        );

initial begin
    // Initialize Inputs
    Rst = 1;
    Clk = 1;
    Ld = 0;
    M = 0;
    R = 0;
    
    i = 0;

    // Wait 100 ns for global reset to finish
    #101 Rst = 0;
    
    // Add stimulus here

    @(posedge Clk) #1;
    
    for(i = 0; i < (2**(2**(N+1))); i = i + 1) begin
        Ld = 1; M = i[(2**(N+1) - 1):2**N]; R = i[(2**N - 1):0];
        @(posedge Clk) #1 Ld = 0;
        @(posedge Valid);
        if(Valid_A != 1) begin
            $display(" Fail - Module did not complete in expected # cycles\n");
            $stop;
        end
        if(P_A != P) begin
            $display(" Fail - Module output does not equal expected value\n");
            $stop;
        end
    end
    
    // Exit - End of Test
    
    M = 0; R = 0;
    
    @(posedge Clk) #1;
    @(posedge Clk) #1;
    @(posedge Clk) #1;
    @(posedge Clk) #1;
    
    $display(" Pass - Module performed as expected\n");
    $stop;
end

////////////////////////////////////////////////////////////////////////////////

always #5 Clk = ~Clk;
      
////////////////////////////////////////////////////////////////////////////////

endmodule













module Booth_Multiplier_2x #(
    parameter N = 16 // Width = N: multiplicand & multiplier
)(
    input Rst, // Reset
    input Clk, // Clock
    
    input Ld, // Load Registers and Start Multiplier
    input [(N - 1):0] M, // Multiplicand
    input [(N - 1):0] R, // Multiplier
    output reg Valid, // Product Valid
    output reg [((2*N) - 1):0] P // Product <= M * R
);

///////////////////////////////////////////////////////////////////////////////
//
// Local Parameters
//

localparam pNumCycles = ((N + 1)/2); // No. of cycles required for product

///////////////////////////////////////////////////////////////////////////////
//
// Declarations
//

reg [4:0] Cntr; // Operation Counter
reg [2:0] Booth; // Booth Recoding Field
reg Guard; // Shift Bit for Booth Recoding

reg [(N + 1):0] A; // Multiplicand w/ guards
reg [(N + 1):0] S; // Adder w/ guards
wire [(N + 1):0] Hi; // Upper Half of Product w/ guards

reg [((2*N) + 1):0] Prod; // Double Length Product w/ guards

///////////////////////////////////////////////////////////////////////////////
//
// Implementation
//

always @(posedge Clk)
begin
    if(Rst)
        Cntr <= #1 0;
    else if(Ld)
        Cntr <= #1 pNumCycles;
    else if(|Cntr)
        Cntr <= #1 (Cntr - 1);
end

// Multiplicand Register
// includes 2 bits to guard sign of multiplicand in the event the most
// negative value is provided as the input.

always @(posedge Clk)
begin
    if(Rst)
        A <= #1 0;
    else if(Ld)
        A <= #1 {{2{M[(N - 1)]}}, M};
end

// Compute Upper Partial Product: (N + 2) bits in width

always @(*) Booth <= {Prod[1:0], Guard}; // Booth's Multiplier Recoding fld

assign Hi = Prod[((2*N) + 1):N]; // Upper Half of the Product Register

always @(*)
begin
    case(Booth)
        3'b000 : S <= Hi; // Prod <= (Prod + 0*A) >> 2;
        3'b001 : S <= Hi + A; // Prod <= (Prod + 1*A) >> 2;
        3'b010 : S <= Hi + A; // Prod <= (Prod + 1*A) >> 2;
        3'b011 : S <= Hi + {A, 1'b0}; // Prod <= (Prod + 2*A) >> 2;
        3'b100 : S <= Hi - {A, 1'b0}; // Prod <= (Prod - 2*A) >> 2;
        3'b101 : S <= Hi - A; // Prod <= (Prod - 1*A) >> 2;
        3'b110 : S <= Hi - A; // Prod <= (Prod - 1*A) >> 2;
        3'b111 : S <= Hi; // Prod <= (Prod - 0*A) >> 2;
    endcase
end

// Double Length Product Register
// Multiplier, R, is loaded into the least significant half on load, Ld.
// Shifted right two places as the product is computed iteratively.

always @(posedge Clk)
begin
    if(Rst)
        Prod <= #1 0;
    else if(Ld)
        Prod <= #1 R;
    else if(|Cntr) // Shift right two bits
        Prod <= #1 {{2{S[(N + 1)]}}, S, Prod[(N - 1):2]};
end

always @(posedge Clk)
begin
    if(Rst)
        Guard <= #1 0;
    else if(Ld)
        Guard <= #1 0;
    else if(|Cntr)
        Guard <= #1 Prod[1];
end

// Assign the product less the two guard bits to the output port
// A double right shift is required since the output product is stored
// into a synchronous register on the last cycle of the multiply.

always @(posedge Clk)
begin
    if(Rst)
        P <= #1 0;
    else if(Cntr == 1)
        P <= #1 {S, Prod[(N - 1):2]};
end

// Count the number of shifts
// This implementation does not use any optimizations to perform multiple
// bit shifts to skip over runs of 1s or 0s.

always @(posedge Clk)
begin
    if(Rst)
        Valid <= #1 0;
    else
        Valid <= #1 (Cntr == 1);
end

endmodule

module tb_Booth_Multiplier_2x;

parameter N = 8;

// UUT Signals

reg Rst;
reg Clk;

reg Ld;
reg [(N - 1):0] M;
reg [(N - 1):0] R;

wire Valid;
wire [((2*N) - 1):0] P;

// Simulation Variables

reg [(2*N):0] i;

// Instantiate the Unit Under Test (UUT)

Booth_Multiplier_2x #(
                        .N(N)
                    ) uut (
                        .Rst(Rst),
                        .Clk(Clk),
                        .Ld(Ld),
                        .M(M),
                        .R(R),
                        .Valid(Valid),
                        .P(P)
                    );

initial begin
    // Initialize Inputs
    Rst = 1;
    Clk = 1;
    Ld = 0;
    M = 0;
    R = 0;
    
    i = 0;

    // Wait 100 ns for global reset to finish
    #101 Rst = 0;
    
    // Add stimulus here
    
    @(posedge Clk) #1;
    
    for(i = (2**N); i < (2**(2*N)) + 1; i = i + 1) begin
        Ld = 1; M = i[((2*N) - 1):N]; R = i[(N - 1):0];
        @(posedge Clk) #1 Ld = 0;
        @(posedge Valid);
    end

// @(posedge Clk) #1 M = 4'h8; R = 4'h2; Ld = 1;
// @(posedge Clk) #1 Ld = 0;
//
// @(posedge Valid); M = 4'h2; R = 4'h8; Ld = 1;
// @(posedge Clk) #1 Ld = 0;
//
// @(posedge Valid); M = 4'h8; R = 4'h6; Ld = 1;
// @(posedge Clk) #1 Ld = 0;
//
// @(posedge Valid); M = 4'h6; R = 4'h8; Ld = 1;
// @(posedge Clk) #1 Ld = 0;
//
// @(posedge Valid); M = 4'h0; R = 4'h0; Ld = 1;
// @(posedge Clk) #1 Ld = 0;

end

///////////////////////////////////////////////////////////////////////////////

always #5 Clk = ~Clk;
      
///////////////////////////////////////////////////////////////////////////////

endmodule











module Booth_Multiplier_4xA #(
    parameter N = 16 // Width = N: multiplicand & multiplier
)(
    input Rst, // Reset
    input Clk, // Clock
    
    input Ld, // Load Registers and Start Multiplier
    input [(N - 1):0] M, // Multiplicand
    input [(N - 1):0] R, // Multiplier
    output reg Valid, // Product Valid
    output reg [((2*N) - 1):0] P // Product <= M * R
);

////////////////////////////////////////////////////////////////////////////////
//
// Local Parameters
//

localparam pNumCycles = ((N + 1)/4); // No. of cycles required for product

////////////////////////////////////////////////////////////////////////////////
//
// Declarations
//

reg [4:0] Cntr; // Operation Counter
reg [4:0] Booth; // Booth Recoding Field
reg Guard; // Shift Bit for Booth Recoding
reg [(N + 3):0] A; // Multiplicand w/ guards
wire [(N + 3):0] Mx8, Mx4, Mx2, Mx1; // Multiplicand products w/ guards
reg PnM_B, M_Sel_B, En_B; // Operand B Control Triple
reg PnM_C, M_Sel_C, En_C; // Operand C Control Triple
wire [(N + 3):0] Hi; // Upper Half of Product w/ guards
reg [(N + 3):0] B, C; // Adder tree Operand Inputs
reg Ci_B, Ci_C; // Adder tree Carry Inputs
wire [(N + 3):0] T, S; // Adder Tree Outputs w/ guards
reg [((2*N) + 3):0] Prod; // Double Length Product w/ guards

////////////////////////////////////////////////////////////////////////////////
//
// Implementation
//

always @(posedge Clk)
begin
    if(Rst)
        Cntr <= #1 0;
    else if(Ld)
        Cntr <= #1 pNumCycles;
    else if(|Cntr)
        Cntr <= #1 (Cntr - 1);
end

// Multiplicand Register
// includes 4 bits to guard sign of multiplicand in the event the most
// negative value is provided as the input.

always @(posedge Clk)
begin
    if(Rst)
        A <= #1 0;
    else if(Ld)
        A <= #1 {{4{M[(N - 1)]}}, M};
end

assign Mx8 = {A, 3'b0};
assign Mx4 = {A, 2'b0};
assign Mx2 = {A, 1'b0};
assign Mx1 = A;

// Compute Upper Partial Product: (N + 4) bits in width

always @(*) Booth <= {Prod[3:0], Guard}; // Booth's Multiplier Recoding field

assign Hi = Prod[((2*N) + 3):N]; // Upper Half of Product Register

// Compute the Control Triples for the First and Second Multiplicand Columns

// For the first column - B

always @(*)
begin
    case(Booth)
        5'b00000 : {PnM_B, M_Sel_B, En_B} <= 3'b000; // (Prod + 0*M + 0*M) >> 4;
        5'b00001 : {PnM_B, M_Sel_B, En_B} <= 3'b000; // (Prod + 0*M + 1*M) >> 4;
        5'b00010 : {PnM_B, M_Sel_B, En_B} <= 3'b000; // (Prod + 0*M + 1*M) >> 4;
        5'b00011 : {PnM_B, M_Sel_B, En_B} <= 3'b000; // (Prod + 0*M + 2*M) >> 4;
        5'b00100 : {PnM_B, M_Sel_B, En_B} <= 3'b000; // (Prod + 0*M + 2*M) >> 4;
        5'b00101 : {PnM_B, M_Sel_B, En_B} <= 3'b001; // (Prod + 4*M - 1*M) >> 4;
        5'b00110 : {PnM_B, M_Sel_B, En_B} <= 3'b001; // (Prod + 4*M - 1*M) >> 4;
        5'b00111 : {PnM_B, M_Sel_B, En_B} <= 3'b001; // (Prod + 4*M + 0*M) >> 4;
        5'b01000 : {PnM_B, M_Sel_B, En_B} <= 3'b001; // (Prod + 4*M + 0*M) >> 4;
        5'b01001 : {PnM_B, M_Sel_B, En_B} <= 3'b001; // (Prod + 4*M + 1*M) >> 4;
        5'b01010 : {PnM_B, M_Sel_B, En_B} <= 3'b001; // (Prod + 4*M + 1*M) >> 4;
        5'b01011 : {PnM_B, M_Sel_B, En_B} <= 3'b001; // (Prod + 4*M + 2*M) >> 4;
        5'b01100 : {PnM_B, M_Sel_B, En_B} <= 3'b001; // (Prod + 4*M + 2*M) >> 4;
        5'b01101 : {PnM_B, M_Sel_B, En_B} <= 3'b011; // (Prod + 8*M - 1*M) >> 4;
        5'b01110 : {PnM_B, M_Sel_B, En_B} <= 3'b011; // (Prod + 8*M - 1*M) >> 4;
        5'b01111 : {PnM_B, M_Sel_B, En_B} <= 3'b011; // (Prod + 8*M + 0*M) >> 4;
        5'b10000 : {PnM_B, M_Sel_B, En_B} <= 3'b111; // (Prod - 8*M - 0*M) >> 4;
        5'b10001 : {PnM_B, M_Sel_B, En_B} <= 3'b111; // (Prod - 8*M + 1*M) >> 4;
        5'b10010 : {PnM_B, M_Sel_B, En_B} <= 3'b111; // (Prod - 8*M + 1*M) >> 4;
        5'b10011 : {PnM_B, M_Sel_B, En_B} <= 3'b101; // (Prod - 4*M - 2*M) >> 4;
        5'b10100 : {PnM_B, M_Sel_B, En_B} <= 3'b101; // (Prod - 4*M - 2*M) >> 4;
        5'b10101 : {PnM_B, M_Sel_B, En_B} <= 3'b101; // (Prod - 4*M - 1*M) >> 4;
        5'b10110 : {PnM_B, M_Sel_B, En_B} <= 3'b101; // (Prod - 4*M - 1*M) >> 4;
        5'b10111 : {PnM_B, M_Sel_B, En_B} <= 3'b101; // (Prod - 4*M - 0*M) >> 4;
        5'b11000 : {PnM_B, M_Sel_B, En_B} <= 3'b101; // (Prod - 4*M - 0*M) >> 4;
        5'b11001 : {PnM_B, M_Sel_B, En_B} <= 3'b101; // (Prod - 4*M + 1*M) >> 4;
        5'b11010 : {PnM_B, M_Sel_B, En_B} <= 3'b101; // (Prod - 4*M + 1*M) >> 4;
        5'b11011 : {PnM_B, M_Sel_B, En_B} <= 3'b000; // (Prod - 0*M - 2*M) >> 4;
        5'b11100 : {PnM_B, M_Sel_B, En_B} <= 3'b000; // (Prod - 0*M - 2*M) >> 4;
        5'b11101 : {PnM_B, M_Sel_B, En_B} <= 3'b000; // (Prod - 0*M - 1*M) >> 4;
        5'b11110 : {PnM_B, M_Sel_B, En_B} <= 3'b000; // (Prod - 0*M - 1*M) >> 4;
        5'b11111 : {PnM_B, M_Sel_B, En_B} <= 3'b000; // (Prod - 0*M - 0*M) >> 4;
        default : {PnM_B, M_Sel_B, En_B} <= 3'b000; // (Prod - 0*M - 0*M) >> 4;
    endcase
end

// For the second column - C

always @(*)
begin
    case(Booth)
        5'b00000 : {PnM_C, M_Sel_C, En_C} <= 3'b000; // (Prod + 0*M + 0*M) >> 4;
        5'b00001 : {PnM_C, M_Sel_C, En_C} <= 3'b001; // (Prod + 0*M + 1*M) >> 4;
        5'b00010 : {PnM_C, M_Sel_C, En_C} <= 3'b001; // (Prod + 0*M + 1*M) >> 4;
        5'b00011 : {PnM_C, M_Sel_C, En_C} <= 3'b011; // (Prod + 0*M + 2*M) >> 4;
        5'b00100 : {PnM_C, M_Sel_C, En_C} <= 3'b011; // (Prod + 0*M + 2*M) >> 4;
        5'b00101 : {PnM_C, M_Sel_C, En_C} <= 3'b101; // (Prod + 4*M - 1*M) >> 4;
        5'b00110 : {PnM_C, M_Sel_C, En_C} <= 3'b101; // (Prod + 4*M - 1*M) >> 4;
        5'b00111 : {PnM_C, M_Sel_C, En_C} <= 3'b000; // (Prod + 4*M + 0*M) >> 4;
        5'b01000 : {PnM_C, M_Sel_C, En_C} <= 3'b000; // (Prod + 4*M + 0*M) >> 4;
        5'b01001 : {PnM_C, M_Sel_C, En_C} <= 3'b001; // (Prod + 4*M + 1*M) >> 4;
        5'b01010 : {PnM_C, M_Sel_C, En_C} <= 3'b001; // (Prod + 4*M + 1*M) >> 4;
        5'b01011 : {PnM_C, M_Sel_C, En_C} <= 3'b011; // (Prod + 4*M + 2*M) >> 4;
        5'b01100 : {PnM_C, M_Sel_C, En_C} <= 3'b011; // (Prod + 4*M + 2*M) >> 4;
        5'b01101 : {PnM_C, M_Sel_C, En_C} <= 3'b101; // (Prod + 8*M - 1*M) >> 4;
        5'b01110 : {PnM_C, M_Sel_C, En_C} <= 3'b101; // (Prod + 8*M - 1*M) >> 4;
        5'b01111 : {PnM_C, M_Sel_C, En_C} <= 3'b000; // (Prod + 8*M + 0*M) >> 4;
        5'b10000 : {PnM_C, M_Sel_C, En_C} <= 3'b000; // (Prod - 8*M - 0*M) >> 4;
        5'b10001 : {PnM_C, M_Sel_C, En_C} <= 3'b001; // (Prod - 8*M + 1*M) >> 4;
        5'b10010 : {PnM_C, M_Sel_C, En_C} <= 3'b001; // (Prod - 8*M + 1*M) >> 4;
        5'b10011 : {PnM_C, M_Sel_C, En_C} <= 3'b111; // (Prod - 4*M - 2*M) >> 4;
        5'b10100 : {PnM_C, M_Sel_C, En_C} <= 3'b111; // (Prod - 4*M - 2*M) >> 4;
        5'b10101 : {PnM_C, M_Sel_C, En_C} <= 3'b101; // (Prod - 4*M - 1*M) >> 4;
        5'b10110 : {PnM_C, M_Sel_C, En_C} <= 3'b101; // (Prod - 4*M - 1*M) >> 4;
        5'b10111 : {PnM_C, M_Sel_C, En_C} <= 3'b000; // (Prod - 4*M - 0*M) >> 4;
        5'b11000 : {PnM_C, M_Sel_C, En_C} <= 3'b000; // (Prod - 4*M - 0*M) >> 4;
        5'b11001 : {PnM_C, M_Sel_C, En_C} <= 3'b001; // (Prod - 4*M + 1*M) >> 4;
        5'b11010 : {PnM_C, M_Sel_C, En_C} <= 3'b001; // (Prod - 4*M + 1*M) >> 4;
        5'b11011 : {PnM_C, M_Sel_C, En_C} <= 3'b111; // (Prod - 0*M - 2*M) >> 4;
        5'b11100 : {PnM_C, M_Sel_C, En_C} <= 3'b111; // (Prod - 0*M - 2*M) >> 4;
        5'b11101 : {PnM_C, M_Sel_C, En_C} <= 3'b101; // (Prod - 0*M - 1*M) >> 4;
        5'b11110 : {PnM_C, M_Sel_C, En_C} <= 3'b101; // (Prod - 0*M - 1*M) >> 4;
        5'b11111 : {PnM_C, M_Sel_C, En_C} <= 3'b000; // (Prod - 0*M - 0*M) >> 4;
        default : {PnM_C, M_Sel_C, En_C} <= 3'b000; // (Prod - 0*M - 0*M) >> 4;
    endcase
end

// Compute the first operand - B

always @(*)
begin
    case({PnM_B, M_Sel_B, En_B})
        3'b001 : {Ci_B, B} <= {1'b0, Mx4};
        3'b011 : {Ci_B, B} <= {1'b0, Mx8};
        3'b101 : {Ci_B, B} <= {1'b1, ~Mx4};
        3'b111 : {Ci_B, B} <= {1'b1, ~Mx8};
        default : {Ci_B, B} <= 0;
    endcase
end

// Compute the second operand - C

always @(*)
begin
    case({PnM_C, M_Sel_C, En_C})
        3'b001 : {Ci_C, C} <= {1'b0, Mx1};
        3'b011 : {Ci_C, C} <= {1'b0, Mx2};
        3'b101 : {Ci_C, C} <= {1'b1, ~Mx1};
        3'b111 : {Ci_C, C} <= {1'b1, ~Mx2};
        default : {Ci_C, C} <= 0;
    endcase
end

// Compute Partial Sum - Cascaded Adders

assign T = Hi + B + Ci_B;
assign S = T + C + Ci_C;

// Double Length Product Register
// Multiplier, R, is loaded into the least significant half on load, Ld
// Shifted right four places as the product is computed iteratively.

always @(posedge Clk)
begin
    if(Rst)
        Prod <= #1 0;
    else if(Ld)
        Prod <= #1 R;
    else if(|Cntr) // Shift right four bits
        Prod <= #1 {{4{S[(N + 3)]}}, S, Prod[(N - 1):4]};
end

always @(posedge Clk)
begin
    if(Rst)
        Guard <= #1 0;
    else if(Ld)
        Guard <= #1 0;
    else if(|Cntr)
        Guard <= #1 Prod[3];
end

// Assign the product less the four guard bits to the output port
// A 4-bit right shift is required since the output product is stored
// into a synchronous register on the last cycle of the multiply.

always @(posedge Clk)
begin
    if(Rst)
        P <= #1 0;
    else if(Cntr == 1)
        P <= #1 {S, Prod[(N - 1):4]};
end

// Count the number of shifts
// This implementation does not use any optimizations to perform multiple
// bit shifts to skip over runs of 1s or 0s.

always @(posedge Clk)
begin
    if(Rst)
        Valid <= #1 0;
    else
        Valid <= #1 (Cntr == 1);
end

endmodule

module tb_Booth_Multiplier_4x;

parameter N = 8;

// UUT Signals

reg Rst;
reg Clk;

reg Ld;
reg [(N - 1):0] M;
reg [(N - 1):0] R;

wire Valid;
wire [((2*N) - 1):0] P;

// Simulation Variables

reg [(2*N):0] i;

// Instantiate the Unit Under Test (UUT)

Booth_Multiplier_4x #(
                        .N(N)
                    ) uut (
                        .Rst(Rst),
                        .Clk(Clk),
                        .Ld(Ld),
                        .M(M),
                        .R(R),
                        .Valid(Valid),
                        .P(P)
                    );

initial begin
    // Initialize Inputs
    Rst = 1;
    Clk = 1;
    Ld = 0;
    M = 0;
    R = 0;
    
    i = 0;

    // Wait 100 ns for global reset to finish
    #101 Rst = 0;
    
    // Add stimulus here
    
    @(posedge Clk) #1;
    
    for(i = (2**N); i < (2**(2*N)) + 1; i = i + 1) begin
        Ld = 1; M = i[((2*N) - 1):N]; R = i[(N - 1):0];
        @(posedge Clk) #1 Ld = 0;
        @(posedge Valid);
    end

// @(posedge Clk) #1 M = 4'h8; R = 4'h2; Ld = 1;
// @(posedge Clk) #1 Ld = 0;
//
// @(posedge Valid); M = 4'h2; R = 4'h8; Ld = 1;
// @(posedge Clk) #1 Ld = 0;
//
// @(posedge Valid); M = 4'h8; R = 4'h6; Ld = 1;
// @(posedge Clk) #1 Ld = 0;
//
// @(posedge Valid); M = 4'h6; R = 4'h8; Ld = 1;
// @(posedge Clk) #1 Ld = 0;
//
// @(posedge Valid); M = 4'h0; R = 4'h0; Ld = 1;
// @(posedge Clk) #1 Ld = 0;

end

///////////////////////////////////////////////////////////////////////////////

always #5 Clk = ~Clk;
      
///////////////////////////////////////////////////////////////////////////////

endmodule









module tb_Booth_Multiplier_4xA;

parameter N = 8;

// UUT Signals

reg Rst;
reg Clk;

reg Ld;
reg [(N - 1):0] M;
reg [(N - 1):0] R;

wire Valid, Valid_A;
wire [((2*N) - 1):0] P, P_A;

// Simulation Variables

reg [(2*N):0] i;

// Instantiate the Unit Under Test (UUT)

Booth_Multiplier_4x #(
                            .N(N)
                        ) uut (
                            .Rst(Rst),
                            .Clk(Clk),
                            .Ld(Ld),
                            .M(M),
                            .R(R),
                            .Valid(Valid),
                            .P(P)
                        );

Booth_Multiplier_4xA #(
                            .N(N)
                        ) RevA (
                            .Rst(Rst),
                            .Clk(Clk),
                            .Ld(Ld),
                            .M(M),
                            .R(R),
                            .Valid(Valid_A),
                            .P(P_A)
                        );

initial begin
    // Initialize Inputs
    Rst = 1;
    Clk = 1;
    Ld = 0;
    M = 0;
    R = 0;
    
    i = 0;

    // Wait 100 ns for global reset to finish
    #101 Rst = 0;
    
    // Add stimulus here
    
    @(posedge Clk) #1;
    
    for(i = (2**N); i < (2**(2*N)) + 1; i = i + 1) begin
        Ld = 1; M = i[((2*N) - 1):N]; R = i[(N - 1):0];
        @(posedge Clk) #1 Ld = 0;
        @(posedge Valid);
        if(Valid_A != 1) begin
            $display(" Fail - Module did not assert Valid as Expected\n");
            $stop;
        end
        if(P != P_A) begin
            $display(" Fail - Module product does not match expected value\n");
            $stop;
        end
    end
    
    // Exit - End of Test
    
    @(posedge Clk) #1;
    @(posedge Clk) #1;
    @(posedge Clk) #1;
    @(posedge Clk) #1;

    $display(" Pass\n");
    $stop;
end

///////////////////////////////////////////////////////////////////////////////

always #5 Clk = ~Clk;
      
///////////////////////////////////////////////////////////////////////////////

endmodule









    if(Rst)
        P <= #1 0;
    else if(Cntr == 1)
        P <= #1 {S[2**pN], S, Prod[2**pN:2]};
end

// Count the number of shifts
// This implementation does not use any optimizations to perform multiple
// bit shifts to skip over runs of 1s or 0s.

always @(posedge Clk)
begin
    if(Rst)
        Valid <= #1 0;
    else
        Valid <= #1 (Cntr == 1);
end

endmodule












